import os
import shutil
import numpy as np
import matplotlib.pyplot as plt
import onnx
import onnxruntime as ort
from collections import defaultdict
np.set_printoptions(threshold=10_000)

DIV_SIZE = 4
SEEDS = 1

def load_and_plot(states):
    envs = [
        #{"env_name" : "WormDiverse", "gmm_run_id" : "gmm-worm1fix3", "mede_run_id": "mede-worm-outprior"}
        #{"env_name" : "BasicDiverse", "gmm_run_id" : "basic-sac", "mede_run_id": "basic-mede"}
        {"env_name" : "WalkerDiverse", "diayn_run_id" : "walk-min-d", "mede_run_id": "walk-min-m"}
            ]  

    for env in envs:
        env_name = env["env_name"]
#        x = np.zeros((1,OBS_SIZE), dtype=np.float32)

        for seed in range(1, SEEDS+1):
        #gmm_model_path = "results/" + gmm_run_id + "/" + env_name + ".onnx"
        #gmm_ort_sess = ort.InferenceSession(gmm_model_path)
        #gmm_outputs = gmm_ort_sess.run(None, {'obs_0': x}) 
        #for out in gmm_outputs:
        #    print(out)

            mede_run_id = env["mede_run_id"]
            mede_model_path = "results/" + mede_run_id + str(seed) + "/" + env_name + ".onnx"
            prior_model_path = "results/" + mede_run_id + str(seed) + "/" + env_name + "_Prior.onnx"

            #states = [[0,0]]
#            x = np.array([[0,0]], dtype=np.float32)
            prior_ort_sess = ort.InferenceSession(prior_model_path)
            mede_ort_sess = ort.InferenceSession(mede_model_path)

            for i, state in enumerate(states):
                print("state ",i)
                x = np.array([state], dtype=np.float32)
                prior_outputs = prior_ort_sess.run(None, {'obs_1': x}) 
                out_mean = []
                out_std = []
                for div in range(DIV_SIZE):
                    #print(prior_outputs[0][0][div])
                    div_oh = np.zeros((len(x), DIV_SIZE), dtype=np.float32)
                    div_oh[:, div] = 1
                    mede_outputs = mede_ort_sess.run(None, {'obs_0': div_oh, 'obs_1': x}) 
                    out_mean.append(np.array(mede_outputs[-3][0]))
                    out_std.append(np.array(mede_outputs[-2][0]))
                for i in range(DIV_SIZE):
                    for j in range(i+1, DIV_SIZE):
                        print(f"Difference {i} {j}")
                        print(prior_outputs[0][0][i], prior_outputs[0][0][j])
                        print("mean: ", np.abs(out_mean[i]-out_mean[j]).round(2))
                    #    print("std: ", np.abs(out_std[i]-out_std[j]).round(2))
                    #print(mede_outputs)
                                #aggr = np.sum(state_to_div_val[i], axis=0)
                #aggr = sac_q_vals - vals
                #for prior, val in zip(prior_outputs[0][0], state_to_div_val[i]):
                #    aggr +=  val - np.log(prior)


states = np.array([[ 1.0000e+01,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  1.0000e+01,  0.0000e+00,  3.2088e-01,  0.0000e+00,
          9.4712e-01,  0.0000e+00,  3.2088e-01,  0.0000e+00,  9.4712e-01,
         -1.9073e-06, -2.0000e+00,  3.2837e+01,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  1.4880e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          6.8300e-01,  0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  2.8500e+00,
          0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00, -3.1762e-01, -8.0000e-01, -2.4313e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -3.1762e-01, -1.8000e+00, -2.4313e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -3.7841e-01, -2.4000e+00, -1.6372e-01, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  3.1762e-01,
         -8.0000e-01,  2.4313e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  3.1762e-01, -1.8000e+00,
          2.4313e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  2.5684e-01, -2.4000e+00,  3.2253e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -9.9259e-01,  1.4880e+00, -7.5979e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -1.7867e+00,  1.4880e+00, -1.3676e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -2.3425e+00,
          1.4880e+00, -1.7931e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  9.9259e-01,
          1.4880e+00,  7.5979e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  1.7867e+00,  1.4880e+00,
          1.3676e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  2.3425e+00,  1.4880e+00,  1.7931e+00],
        [ 1.0000e+01,  0.0000e+00,  0.0000e+00,  0.0000e+00, -5.9605e-08,
          0.0000e+00,  1.0000e+01,  0.0000e+00,  2.6123e-01,  0.0000e+00,
          9.6528e-01,  0.0000e+00,  2.6123e-01,  0.0000e+00,  9.6528e-01,
         -2.3842e-07, -2.0000e+00,  1.7320e+01,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  1.4880e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          6.8300e-01,  0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  2.8500e+00,
          0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00, -3.4540e-01, -8.0000e-01, -2.0173e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -3.4540e-01, -1.8000e+00, -2.0173e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -3.9583e-01, -2.4000e+00, -1.1537e-01, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  3.4540e-01,
         -8.0000e-01,  2.0173e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  3.4540e-01, -1.8000e+00,
          2.0173e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  2.9497e-01, -2.4000e+00,  2.8808e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -1.0794e+00,  1.4880e+00, -6.3040e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -1.9429e+00,  1.4880e+00, -1.1347e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -2.5474e+00,
          1.4880e+00, -1.4877e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0794e+00,
          1.4880e+00,  6.3040e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  1.9429e+00,  1.4880e+00,
          1.1347e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  2.5474e+00,  1.4880e+00,  1.4877e+00],
        [ 1.0000e+01,  0.0000e+00,  0.0000e+00,  0.0000e+00,  1.4901e-08,
          0.0000e+00,  1.0000e+01,  0.0000e+00,  9.5520e-01,  0.0000e+00,
         -2.9595e-01,  0.0000e+00,  9.5520e-01,  0.0000e+00, -2.9595e-01,
          1.7881e-07, -2.0000e+00,  2.8533e+01,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  1.4880e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          6.8300e-01,  0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  2.8500e+00,
          0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  3.2992e-01, -8.0000e-01,  2.2615e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  3.2992e-01, -1.8000e+00,  2.2615e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          3.8646e-01, -2.4000e+00,  1.4367e-01, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -3.2992e-01,
         -8.0000e-01, -2.2615e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00, -3.2992e-01, -1.8000e+00,
         -2.2615e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00, -2.7339e-01, -2.4000e+00, -3.0864e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  1.0310e+00,  1.4880e+00,  7.0674e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          1.8559e+00,  1.4880e+00,  1.2721e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  2.4333e+00,
          1.4880e+00,  1.6679e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -1.0310e+00,
          1.4880e+00, -7.0674e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00, -1.8559e+00,  1.4880e+00,
         -1.2721e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00, -2.4333e+00,  1.4880e+00, -1.6679e+00],
        [ 1.0000e+01,  0.0000e+00,  0.0000e+00,  0.0000e+00, -3.5763e-07,
          0.0000e+00,  1.0000e+01,  0.0000e+00,  4.2041e-01,  0.0000e+00,
          9.0733e-01,  0.0000e+00,  4.2041e-01,  0.0000e+00,  9.0733e-01,
          1.9073e-06, -2.0000e+00,  2.9672e+01,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  1.4880e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          6.8300e-01,  0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  2.8500e+00,
          0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00, -2.5860e-01, -8.0000e-01, -3.0516e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -2.5860e-01, -1.8000e+00, -3.0516e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -3.3489e-01, -2.4000e+00, -2.4051e-01, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  2.5860e-01,
         -8.0000e-01,  3.0516e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  2.5860e-01, -1.8000e+00,
          3.0516e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  1.8231e-01, -2.4000e+00,  3.6981e-01,
         -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -8.0813e-01,  1.4880e+00, -9.5363e-01, -0.0000e+00,
         -0.0000e+00, -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -1.4546e+00,  1.4880e+00, -1.7165e+00, -0.0000e+00, -0.0000e+00,
         -0.0000e+00,  1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -1.9072e+00,
          1.4880e+00, -2.2506e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  8.0813e-01,
          1.4880e+00,  9.5363e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,
          1.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  1.4546e+00,  1.4880e+00,
          1.7165e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  1.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  1.9072e+00,  1.4880e+00,  2.2506e+00]])

if __name__ == "__main__":
    load_and_plot(states)







